package triesDataStructure;

import java.util.HashMap;
import java.util.Map;

public class Tries {
	static class TrieNode {
	    Map<Character, TrieNode> children;
	    boolean isWord;

	    public TrieNode() {
	        children = new HashMap<>();
	        isWord = false;
	    }
	}
	    private TrieNode root;

	    public Tries() {
	        root = new TrieNode();
	    }

	    public void insert(String word) {
	        TrieNode node = root;
	        for (char c : word.toCharArray()) {
	            node.children.putIfAbsent(c, new TrieNode());
	            node = node.children.get(c);
	        }
	        node.isWord = true;
	    }

	    public boolean search(String word) {
	        TrieNode node = root;
	        for (char c : word.toCharArray()) {
	            if (!node.children.containsKey(c)) {
	                return false;
	            }
	            node = node.children.get(c);
	        }
	        return node.isWord;
	    }

	    public boolean startsWith(String prefix) {
	        TrieNode node = root;
	        for (char c : prefix.toCharArray()) {
	            if (!node.children.containsKey(c)) {
	                return false;
	            }
	            node = node.children.get(c);
	        }
	        return true;
	    }

	public static void main(String[] args) {
		Tries trie = new Tries();
		trie.insert("apple");
		System.out.println(trie.search("apple"));   // true
		System.out.println(trie.search("app"));     // false
		System.out.println(trie.startsWith("app")); // true
		trie.insert("app");
		System.out.println(trie.search("app"));     // true

	}
	}



